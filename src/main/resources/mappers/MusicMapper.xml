<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
 "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.neo.myhome.dao.MusicDao"><!--namespace를 통해 UserDAO와 연결합니다. -->

    <resultMap id="musicMap" type="com.neo.myhome.model.MusicItem">
        <id column="id" property="id"/>
        <result column="title" property="title"/>
        <result column="capo" property="capo"/>
        <collection property="items" resultMap="lyricsMap"></collection>
    </resultMap>
    <resultMap id="lyricsMap" type="com.neo.myhome.model.Lyrics">
        <result column="id" property="id"/>
        <result column="seq" property="seq"/>
        <result column="leftChorus" property="leftChorus"/>
        <result column="leftCode" property="leftCode"/>
        <result column="leftLyrics" property="leftLyrics"/>
        <result column="rightChorus" property="rightChorus"/>
        <result column="rightCode" property="rightCode"/>
        <result column="rightLyrics" property="rightLyrics"/>
    </resultMap>
    <select id="searchMusicList" resultType="com.neo.myhome.model.MusicItem">
        SELECT DISTINCT m.id, title, NVL(capo,0) capo
        FROM music m
        LEFT OUTER
        JOIN capo c ON m.id = c.music_id AND c.user_id = (
        SELECT id
        FROM USER
        WHERE username =#{username})
        <if test="title != null and !title.equals('')">
            WHERE title LIKE CONCAT('%','${title}','%') OR m.id in (
            SELECT a.id
            FROM
            (
            SELECT id, GROUP_CONCAT(leftLyrics SEPARATOR ' ') lLyrics
            FROM lyrics
            GROUP BY id
            HAVING lLyrics LIKE CONCAT('%','${title}','%')) a
            LEFT OUTER
            JOIN
            (
            SELECT id, GROUP_CONCAT(rightLyrics SEPARATOR ' ') rLyrics
            FROM lyrics
            GROUP BY id
            HAVING rLyrics LIKE CONCAT('%','${title}','%')) b ON a.id = b.id UNION ALL
            SELECT b.id
            FROM
            (
            SELECT id, GROUP_CONCAT(leftLyrics SEPARATOR ' ') lLyrics
            FROM lyrics
            GROUP BY id
            HAVING lLyrics LIKE CONCAT('%','${title}','%')) a
            RIGHT OUTER
            JOIN
            (
            SELECT id, GROUP_CONCAT(rightLyrics SEPARATOR ' ') rLyrics
            FROM lyrics
            GROUP BY id
            HAVING rLyrics LIKE CONCAT('%','${title}','%')) b ON a.id = b.id)
        </if>
        ORDER BY m.id*1, m.id



        <!--        SELECT distinct m.id, title, NVL(capo,0) capo-->
<!--        FROM music m left outer join (SELECT id, GROUP_CONCAT(leftLyrics SEPARATOR ' ') leftLyrics FROM lyrics GROUP BY id ORDER BY id*1 ) l ON m.id=l.id-->
<!--        LEFT OUTER JOIN (SELECT id, GROUP_CONCAT(rightLyrics SEPARATOR ' ') AS rightLyrics FROM lyrics GROUP BY id ORDER BY id*1) r ON m.id=r.id-->
<!--        LEFT OUTER JOIN capo c on m.id = c.music_id and c.user_id = (select id from user where username = #{username})-->
<!--        <if test="title != null and !title.equals('')">-->
<!--            WHERE title LIKE CONCAT('%','${title}','%')-->
<!--            OR l.leftLyrics LIKE CONCAT('%','${title}','%')-->
<!--            OR r.rightLyrics LIKE CONCAT('%','${title}','%')-->
<!--        </if>-->
<!--        ORDER BY m.id*1-->
    </select>
    <select id="searchMusicItem" resultMap="musicMap">
        SELECT  m.id,
                m.title,
                NVL(c.capo,0) capo,
                l.seq,
                l.leftChorus,
                l.leftCode,
                l.leftLyrics,
                l.rightChorus,
                l.rightCode,
                l.rightLyrics
        FROM music m LEFT OUTER JOIN lyrics l ON m.id = l.id LEFT OUTER JOIN capo c ON m.id = c.music_id and c.user_id = (select id from user where username = #{username})

        <if test="id != null and !id.equals('')">
            WHERE m.id = #{id}

        </if>
        ORDER BY l.SEQ
    </select>
    <insert id="insertItem" parameterType="com.neo.myhome.model.MusicItem">
        INSERT INTO music
        (`id`, `title`)
        VALUES
        (#{id}, '${title}')
    </insert>
    <insert id="insertDetailItem" parameterType="com.neo.myhome.model.Lyrics">
        INSERT INTO lyrics (`id`, `seq`, `leftChorus`, `leftCode`, `leftLyrics`, `rightChorus`, `rightCode`, `rightLyrics`)
        VALUES
        (#{id}, #{seq}, #{leftChorus}, #{leftCode}, #{leftLyrics}, #{rightChorus}, #{rightCode}, #{rightLyrics})
    </insert>
    <update id="updateItem" parameterType="com.neo.myhome.model.MusicItem">
        UPDATE music SET
            title = '${title}'
        WHERE id=#{id}

    </update>
    <delete id="deleteDetailItem">
        DELETE FROM lyrics WHERE id = #{id}
    </delete>
    <insert id="insertCapo">
        INSERT INTO capo
            (music_id, user_id, capo)
        VALUES
            (#{musicId},(SELECT id FROM user WHERE username = #{userId}), #{capo}
        )
        ON DUPLICATE KEY UPDATE capo =#{capo}
    </insert>
</mapper>